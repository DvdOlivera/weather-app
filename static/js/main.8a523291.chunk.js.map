{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEMA,EACA,mCADAA,EAEE,2CAmEOC,MAhEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KA6Bb,OAGE,qBAAKC,UAAiC,oBAAfF,EAAQG,MAAuBH,EAAQG,KAAKC,KAAO,GAArB,WAArC,MAAhB,SACE,iCACE,qBAAKF,UAAU,aAAf,SACC,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAAUS,EAAEC,OAAOC,QAClCA,MAASZ,EACTa,WArCM,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAK,SAAAG,GACJnB,EAAS,IACTE,EAAWiB,GACXC,QAAQC,IAAIF,WAiCa,oBAAhBlB,EAAQG,KACf,gCACA,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,sBAAKrB,UAAU,OAAf,cAhCU,SAACsB,GACnB,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SACtE,YACiBD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAC3E,YAAa,UAAW,WAAY,YAKpBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAsBFE,CAAY,IAAIC,YAG9C,sBAAKhC,UAAU,cAAf,UACI,sBAAKA,UAAU,OAAf,UACOiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD/B,WAGA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAX9C,SCvCMkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.8a523291.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api={\n  key:\"fa14901592201ecc43118e787bb320de\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n  \n}\nfunction App() {\n  const [query, setQuery] = useState(``);\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then( res => res.json())\n      .then(result => {\n        setQuery(``);\n        setWeather(result);\n        console.log(result);\n    })\n  }\n  }\n\n  const dateBuilder = (d) =>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",\n       \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\",\n  \"Saturday\"];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n    \n  }\n  return (\n    \n    \n    <div className={typeof weather.main !=\"undefined\" ? ((weather.main.temp > 16) ? `app warm` : `app`):`app`}>\n      <main>\n        <div className=\"search-box\">\n         <input\n           type=\"text\" \n           className=\"search-bar\" \n           placeholder=\"search...\"\n           onChange={e => setQuery (e.target.value)}\n           value = {query}\n           onKeyPress = {search}>\n         </input>\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\"> {dateBuilder(new Date())}</div>\n         </div>\n         \n      <div className=\"weather-box\">\n          <div className=\"temp\">\n                {Math.round(weather.main.temp)}Â°c\n          </div>\n          <div className=\"weather\">{weather.weather[0].main}</div>\n      </div>\n      </div>\n        ) : (``)}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}